---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: pipelines
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: "git-clone"

    # Use maven task from hub
    #
    # pipelinesascode.tekton.dev/task-1: "maven"

    # You can add more tasks by increasing the suffix number, you can specify them as array to have multiple of them.
    # browse the tasks you want to include from hub on https://hub.tekton.dev/
    #
    # pipelinesascode.tekton.dev/task-2: "[curl, buildah]"

    # How many runs we want to keep.
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
    - name: storage_secret
      value: "cos-bucket"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
      - name: storage_secret
    workspaces:
      - name: source
      - name: basic-auth
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
          kind: ClusterTask
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
      # Customize this task if you like, or just do a taskRef
      # to one of the hub task.
      - name: download-model
        runAfter:
          - fetch-repository
        workspaces:
          - name: output
            workspace: source
        taskSpec:
          workspaces:
            - name: output
          steps:
            - name: download-model
              image: example-registry-quay-openshift-operators.bi-ocp-162e406f043e20da9b0ef0731954a894-0000.eu-gb.containers.appdomain.cloud/brian/ubi-micro-jq:latest
              workingDir: $(workspaces.output.path)
              env:
                - name: APIKEY
                  valueFrom:
                    secretKeyRef:
                      name: $(params.storage_secret)
                      key: "api-key"
              script: |
                eval "export $(cat model/config.json | jq -r 'to_entries | map("\(.key)=\(.value)") | @sh')"
                eval "export $(echo ${MODEL} | jq -r 'to_entries | map("\(.key)=\(.value)") | @sh')"

                set | grep MODEL
                
                TOKEN=`curl -X "POST" "https://iam.cloud.ibm.com/oidc/token" \
                    -H 'Accept: application/json' \
                    -H 'Content-Type: application/x-www-form-urlencoded' \
                    --data-urlencode "apikey=${APIKEY}" \
                    --data-urlencode "response_type=cloud_iam" \
                    --data-urlencode "grant_type=urn:ibm:params:oauth:grant-type:apikey" \
                    -s | jq -r '.access_token'`

                curl https://${MODEL_STORE_ENDPOINT}/${MODEL_STORE_BUCKET}/${MODEL_STORE_KEY} -H "authorization: bearer $TOKEN" -o ${MODEL_NAME}

                ls -al
                exit 0
  workspaces:
  - name: source
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
  # This workspace will inject secret to help the git-clone task to be able to
  # checkout the private repositories
  - name: basic-auth
    secret:
      secretName: "{{ git_auth_secret }}"
